<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Telebon</title>
  <link rel="icon" type="image/x-icon" href="https://i.ibb.co/Q9RddYC/image.png">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">

  <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: "Inter", sans-serif;
    }
    body {
      font-family: Arial, sans-serif;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      inset: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background: #00000040;
    }

    .modal-content {
      background-color: #fff;
      margin: auto;
      display: flex;
      flex-direction: column;
      padding: 32px 20px;
      max-width: 375px;
      min-width: 375px;
      text-align: left;
      border-radius: 8px;
      >h1{
        font-size: 24px;
        font-weight: 700;
        line-height: 22px;
        color: #000000;
        margin-bottom: 13px;
      }
      >p{
        color: #797979;
        font-size: 14px;
        line-height: 22px;
        font-weight: 400;
        margin-bottom: 8px;
      }
    }

    #confirmExit, #cancelExit {
      height: 48px;
      width: 100%;
      font-size: 16px;
      font-weight: 700;
      line-height: 14px;
      cursor: pointer;
      border-radius: 8px;
      text-align: center;
    }

    #confirmExit {
      background-color: #FFFFFF;
      color: #2A2C32;
      border: 1px solid #C7CBD4;
    }

    #cancelExit {
      background-color: #008BAA;
      border: 1px solid #008BAA;
      color: white;
      margin-top: 12px;
      margin-bottom: 16px;
    }
    .flex{
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 3px;
    }
    .header{
      display: flex;
      align-items: center;
      justify-content: center;
      height: 40px;
      margin-top: 24px;
      position: relative;
      margin-bottom: 28px;
      >a{
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        right: 16px;
      }
    }
    #header-title {

      text-align: center;
      font-size: 24px;
      font-weight: 700;
      line-height: 20px;
      text-transform: none;
    }
    .container {
      max-width: 630px;
      margin: 0 auto;
      padding: 0 15px;
      overflow: hidden;
      background: #fff;
    }

    .swiper-container {
      width: 100%;
      height: 82px;
      margin-bottom: 20px;
      /*overflow: hidden;*/
    }
    .swiper-slide {
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: #FFFFFF;
      border-radius: 8px;
      border: 1px solid #d4d4d4;
      height: 82px;
      width: 60px;
      cursor: pointer;

      &:hover{
        box-shadow: 1px 2px 8px -2px #218CAC73;
        transition: .3s ease;
      }
    }
    .swiper-slide.active {
      background-color: #008BAA;
      color: #fff;
      .time, .day_wrapper .day, .day_wrapper .date{
        color: #ffffff;
      }

    }
    .day_wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      user-select: none;
      justify-content: center;
    }
    .day {
      text-transform: capitalize;
      font-size: 15px;
      font-weight: 400;
      text-align: center;
      line-height: 20px;
      color: #000;
      margin-bottom: 4px;
    }
    .date {
      font-size: 16px;
      font-weight: 700;
      text-align: center;
      line-height: 20px;
      color: #000;
    }
    .swiper-slide_time{
      width: 88px;
      min-width: 88px;
      height: 40px;
      border-radius: 8px;
      border: 1px solid #E7E7E7;
      display: flex;
      align-items: center;
      justify-content: center;
      .time{
        font-size: 14px;
        font-weight: 400;
        line-height: 20px;
        text-align: center;
        color: #000000;
      }
    }
    .tabs_wrapper{
      border-top: 1px solid #D4D4D4;
      padding-top: 20px;

      margin-bottom: 20px;

      .tabs {
        display: flex;
        background: #F3F3F3;
        max-width: 240px;
        border-radius: 8px;
        margin: 0 auto 26px;
        padding: 4px 3px;
        justify-content: space-around;
        .tab {
          padding: 10px;
          cursor: pointer;
          flex: 1;
          text-align: center;
          user-select: none;
          font-size: 14px;
          color: #767676;
          line-height: 18px;
          font-weight: 400;
          &.active {
            box-shadow: 0px 3px 8px 0px #0000001F;
            border: 0.5px solid #0000000A;
            background: #ffffff;
            border-radius: 8px;
            color: #000000;
          }
        }

      }
    }
    .time-slider-container {
      margin-bottom: 20px;
      .time-swiper{
        height: 40px;
        margin-bottom: 26px;
      }
    }
    .service{
      padding: 0 16px;
      background: #f3f3f3;

      border-radius: 8px;
      .services{
        &:first-child{
          padding-top: 16px;
        }
        .service_name, .service_price{
          font-size: 16px;
          line-height: 20px;
          font-weight: 600;
          color: #171717;
        }
        .service_options{
          display: flex;
          flex-direction: column;
          align-items: flex-end;
        }

      }
      h3{
        font-size: 14px;
        line-height: 20px;
        text-align: right;
        font-weight: 400;
        color: #888888;
        margin-bottom: 16px;
      }
      .employee{
        padding-top: 22px;
        padding-bottom: 22px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1px solid #E7E7E7;
        >p{
          font-size: 14px;
          line-height: 20px;
          font-weight: 400;
          color: #888888;
          >span{
            color: #000000;
          }
        }
        >a{
          width: 93px;
          height: 30px;
          text-align: center;
          display: flex;
          align-items: center;
          justify-content: center;
          text-decoration: none;
          border: 1px solid #e7e7e7;
          border-radius: 8px;
          background: #ffffff;
          font-size: 14px;
          font-weight: 400;
          line-height: 20px;
          color: #000000;
        }
      }
    }
    .add_service_button{
      padding: 26px 16px;
      display: flex;
      align-items: center;
      border-bottom: 1px solid #D4D4D4;
      button{
        border: none;
        outline: none;
        background: transparent;
        >a{
          text-decoration: none;
          color: #1795B2;
          font-size: 16px;
          line-height: 20px;
          font-weight: 600;
        }
      }
    }
    .summary_wrapper{
      display: flex;
      margin: 48px 0 16px 0;
      height: 56px;
      align-items: center;
      justify-content: flex-end;
      .summary_title{
        margin-right: 24px;
        color: #171717;
        position: relative;
        top: -15px;
        font-size: 14px;
        line-height: 20px;
        font-weight: 400;
      }
      .summary{
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        >h3{
          color: #171717;
          font-size: 28px;
          margin-top: 1px;
          line-height: 20px;
          font-weight: 700;
          margin-bottom: 7px;
        }
        p{
          font-size: 14px;
          line-height: 20px;
          font-weight: 400;
          color: #919191;
        }
      }
    }
    .next_button{
      margin: 0;
      height: 47px;
      text-decoration: none;
      background: #008BAA;
      border: 1px solid #0000001A;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      line-height: 23px;
      color: #ffffff;
      font-weight: 700;
    }

  </style>
</head>
<body>
<div class="container">
  <div id="exitModal" class="modal">
    <div class="modal-content">
      <h1>Отменить бронирование?</h1>
      <p>Действительно хотите прервать процесс? Несохраненные изменения будут потеряны.</p>
      <button id="cancelExit">Продолжить запись</button>
      <button id="confirmExit">Да, отменить</button>

    </div>
  </div>
  <div class="header">
    <h1 id="header-title"></h1>
    <a href="/">
      <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M0.307538 0.307538C0.717588 -0.102513 1.38241 -0.102513 1.79246 0.307538L7 5.51508L12.2075 0.307538C12.6176 -0.102513 13.2824 -0.102513 13.6925 0.307538C14.1025 0.717588 14.1025 1.38241 13.6925 1.79246L8.48492 7L13.6925 12.2075C14.1025 12.6176 14.1025 13.2824 13.6925 13.6925C13.2824 14.1025 12.6176 14.1025 12.2075 13.6925L7 8.48492L1.79246 13.6925C1.38241 14.1025 0.717588 14.1025 0.307538 13.6925C-0.102513 13.2824 -0.102513 12.6176 0.307538 12.2075L5.51508 7L0.307538 1.79246C-0.102513 1.38241 -0.102513 0.717588 0.307538 0.307538Z" fill="#171717"/>
      </svg>

    </a>
  </div>

  <div class="swiper-container day-swiper">
    <div class="swiper-wrapper"></div>
  </div>

  <div class="tabs_wrapper">
    <div class="tabs">
      <div class="tab" data-time="morning">Утро</div>
      <div class="tab" data-time="day">День</div>
      <div class="tab" data-time="evening">Вечер</div>
    </div>
  </div>

  <div class="time-slider-container">
    <div class="swiper-container time-swiper">
      <div class="swiper-wrapper"></div>
    </div>
  </div>

  <div id="selected-time" style="text-align: center; font-size: 16px; margin-bottom: 20px;"></div>

  <div class="service">
    <div class="services"></div>
    <h3></h3>
    <div class="employee">

      <p>Сотрудник: <span>{{employee_fio}}</span></p>
      <a href="/employee/{{user_id}}" id="change-employee-button">Изменить</a>
    </div>
  </div>

  <div class="summary_wrapper">
    <p class="summary_title">Итого :</p>
    <div class="summary">
      <h3>12.00</h3>
      <p></p>
    </div>
  </div>
  <a id="nextButton"  class="next_button" href="/summary/{{user_id}}">Продолжить</a>
</div>

<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script>
  let update = {{update}}
  if (update) {
    window.onbeforeunload = function() {
      const userId = localStorage.getItem('user_id');
      alert(userId);
      fetch('/exit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: userId })
      });
    };
    update = true;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const elements = {
      daySwiperWrapper: document.querySelector('.day-swiper .swiper-wrapper'),
      timeSwiperWrapper: document.querySelector('.time-swiper .swiper-wrapper'),
      tabs: document.querySelectorAll('.tab'),
      headerTitle: document.getElementById('header-title'),
      employeeTimeElement: document.querySelector('.service h3'),
      summaryDuration: document.querySelector('.summary p'),
      summaryTotalPrice: document.querySelector('.summary h3'),
      modal: document.getElementById("exitModal"),
      confirmExitBtn: document.getElementById("confirmExit"),
      cancelExitBtn: document.getElementById("cancelExit"),
      closeButton: document.querySelector('.header a'),
      servicesContainer: document.querySelector('.services'),
      changeEmployeeButton: document.getElementById('change-employee-button'),
      nextButton: document.getElementById('nextButton'),
    };
    const config = {
      url: "{{url}}",
      chosenDate: "{{chosen_date}}",
      chosenTime: "{{chosen_time}}",
      INTERVAL: 30,
      TIME_START: 10,
      TIME_END: 20,
      currencyFormatter: new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }),
      isLinkEnabled: {{is_link_enabled}},
      services: {{{chosen_services}}},
      days: {{{days}}}.map(day => new Date(day)),
      times: {{{times}}}
    };

    const today = new Date();
    let selectedDay = config.chosenDate;
    let selectedTime1 = config.chosenTime;
    const totalMinutes = calculateTotalDuration(config.services);
    const totalPrice = calculateTotalPrice(config.services);

    function updateButtonState() {
      if (selectedDay && selectedTime1) {
        elements.nextButton.style.pointerEvents = 'auto';
        elements.nextButton.style.background = '#008BAA';
      } else {
        elements.nextButton.style.pointerEvents = 'none';
        elements.nextButton.style.background = '#D6D6D7';
      }
    }
    function formatDate(date) {
      const options = { weekday: 'short', day: '2-digit' };
      return new Intl.DateTimeFormat('ru-RU', options).format(date);
    }
    function calculateTotalDuration(services) {
      return services.reduce((total, service) => total + parseInt(service.duration, 10), 0);
    }
    function calculateTotalPrice(services) {
      return services.reduce((total, service) => total + parseFloat(service.tarif), 0);
    }
    function addMinutesToTime(startTime, minutesToAdd) {
      const [hours, minutes] = startTime.split(':').map(Number);
      const startDate = new Date();
      startDate.setHours(hours, minutes, 0);

      const endDate = new Date(startDate.getTime() + minutesToAdd * 60000);

      const endHours = endDate.getHours().toString().padStart(2, '0');
      const endMinutes = endDate.getMinutes().toString().padStart(2, '0');

      return `${endHours}:${endMinutes}`;
    }
    function formatMonthYear(date) {
      const options = { month: 'long', year: 'numeric' };
      return new Intl.DateTimeFormat('ru-RU', options).format(date);
    }

    function formatTime(date) {
      return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    }

    function renderService(){
      config.services.forEach(service => {
        const serviceElement = document.createElement('div');
        const formattedPrice = config.currencyFormatter.format(parseFloat(service.tarif));
        serviceElement.innerHTML = `<div class="flex">
                                                <h4 class="service_name">${service.name}</h4>
                                                <div class="service_options">
                                                    <h4 class="service_price">${formattedPrice}</h4>
                                                </div>
                                            </div>
                                           `;
        elements.servicesContainer.appendChild(serviceElement);
      });
    }

    function renderTimeSlider(timeSlots) {
      elements.timeSwiperWrapper.innerHTML = '';
      const times = timeSlots.map(time => new Date(0, 0, 0, ...time.split(':').map(Number)));
      let hasMorning = false, hasDay = false, hasEvening = false;


      times.forEach(time => {
        const formattedTime = formatTime(time);
        const timeElement = document.createElement('div');
        timeElement.className = 'swiper-slide swiper-slide_time';
        timeElement.innerHTML = `<div class="day_wrapper"><div class="time">${formattedTime}</div></div>`;
        timeElement.setAttribute('data-time', formattedTime);
        elements.timeSwiperWrapper.appendChild(timeElement);

        const hour = time.getHours();
        if (hour < 12) hasMorning = true;
        else if (hour >= 12 && hour < 16) hasDay = true;
        else if (hour >= 16) hasEvening = true;
      });
      elements.tabs.forEach(tab => {
        const timeOfDay = tab.dataset.time;
        if ((timeOfDay === 'morning' && !hasMorning) ||
          (timeOfDay === 'day' && !hasDay) ||
          (timeOfDay === 'evening' && !hasEvening)) {
          tab.classList.add('disabled');
        } else {
          tab.classList.remove('disabled');
        }
      });
      const timeSwiper = new Swiper('.time-swiper', {
        slidesPerView: 4,
        spaceBetween: 10,
        on: {
          slideChange: () => {
            const activeSlideTime = timeSwiper.slides[timeSwiper.activeIndex].querySelector('.time').textContent;
            updateActiveTab(activeSlideTime);
          }
        }
      });
      elements.tabs.forEach(tab => {
        tab.addEventListener('click', event => {
          if (!tab.classList.contains('disabled')) {
            const timeOfDay = event.target.dataset.time;
            let targetSlideIndex;

            switch (timeOfDay) {
              case 'morning':
                targetSlideIndex = times.findIndex(t => t.getHours() < 12);
                break;
              case 'day':
                targetSlideIndex = times.findIndex(t => t.getHours() >= 12 && t.getHours() < 16);
                break;
              case 'evening':
                targetSlideIndex = times.findIndex(t => t.getHours() >= 16);
                break;
            }

            if (targetSlideIndex !== -1) {
              timeSwiper.slideTo(targetSlideIndex);
              updateActiveTab(formatTime(times[targetSlideIndex]));
            }
          }
        });
      });
    }

    function fetchDayAvailability(){
      return fetch(`${config.url}/booking/choose_day`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({user_id: localStorage.getItem('user_id'), date: new Date(config.chosenDate).toISOString()})
      })
        .then(response => response.json())
    }

    fetchDayAvailability().then(data =>
    {
      if(data.message === "Success")
      {
        config.TIME_END = 20;
        config.INTERVAL = 30;
        config.TIME_START = 10;
        const tim = JSON.parse(data.times)
        renderTimeSlider(tim)
        updateButtonState();
        if(config.chosenTime !== null && config.chosenTime !== undefined && config.chosenTime !== ""){
          const specificElement = document.querySelector(`[data-time="${config.chosenTime}"]`);
          document.querySelectorAll('.swiper-slide_time').forEach(el => el.classList.remove('active'));
          specificElement.classList.add('active');
        }
      }
    });

    if(!config.isLinkEnabled) {
      elements.changeEmployeeButton.style.display = 'none';
    }

    const textNode = document.createTextNode(`${totalMinutes} мин`);
    elements.summaryDuration.appendChild(textNode);

    const formattedTotalPrice = config.currencyFormatter.format(totalPrice);
    elements.summaryTotalPrice.textContent = formattedTotalPrice;

    function updateActiveTab(currentTime) {
      const hour = parseInt(currentTime.split(':')[0], 10);
      elements.tabs.forEach(tab => {
        tab.classList.remove('active');
        if ((tab.dataset.time === 'morning' && hour < 12) ||
          (tab.dataset.time === 'day' && hour >= 12 && hour < 16) ||
          (tab.dataset.time === 'evening' && hour >= 16)) {
          tab.classList.add('active');
        }
      });
    }
    renderTimeSlider(config.times);
    renderService()

    config.days.forEach(day => {
      const formattedDate = formatDate(day);
      const [dayOfWeek, dayOfMonth] = formattedDate.split(',');

      const dayElement = document.createElement('div');
      dayElement.className = 'swiper-slide swiper-slide_date';
      dayElement.setAttribute('data-date', day.toISOString());
      dayElement.innerHTML = `<div class="day_wrapper">
                                            <div class="day">${dayOfWeek}</div>
                                            <div class="date">${dayOfMonth}</div>
                                        </div>`;
      elements.daySwiperWrapper.appendChild(dayElement);
    });

    if (config.chosenDate !== ""){
      const temp = new Date(config.chosenDate);
      const specificElement = document.querySelector(`[data-date="${temp.toISOString()}"]`);
      document.querySelectorAll('.swiper-slide_date').forEach(el => el.classList.remove('active'));
      specificElement.classList.add('active');
    }

    if (config.chosenTime !== ""){
      const [hours, minutes] = time.split(':');
      console.log('chosen_time')
      console.log(config.chosenTime)
      const temp = new Date(0,0,0,parseInt(hours),parseInt(minutes));
      const specificElement = document.querySelector(`[data-time="${config.chosenTime}"]`);
      document.querySelectorAll('.swiper-slide_time').forEach(el => el.classList.remove('active'));
      specificElement.classList.add('active');
      const endTime = addMinutesToTime(config.chosenTime, totalMinutes);
      elements.employeeTimeElement.textContent = `${config.chosenTime} - ${endTime}`;
    }

    elements.daySwiperWrapper.addEventListener('click', (event) => {
      const timeElement = event.target.closest('.swiper-slide_date');
      config.TIME_END = 20;
      config.INTERVAL = 30;
      config.TIME_START = 10;
      if (timeElement) {
        document.querySelectorAll('.swiper-slide_date').forEach(el => el.classList.remove('active'));
        timeElement.classList.add('active');

        const date = timeElement.getAttribute('data-date');

        selectedDay = date;
        fetch(`${config.url}/booking/choose_day`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({user_id: localStorage.getItem('user_id'), date: selectedDay})
        })
          .then(response => response.json())
          .then(data =>
          {
            if (data.message === "Success") {
              config.INTERVAL = 30;
              config.TIME_START = 10;
              config.TIME_END = 20;
              const timeSlots = JSON.parse(data.times);
              renderTimeSlider(timeSlots);
              updateButtonState();

              if (config.chosenTime) {
                const specificElement = document.querySelector(`[data-time="${config.chosenTime}"]`);
                document.querySelectorAll('.swiper-slide_time').forEach(el => el.classList.remove('active'));
                specificElement.classList.add('active');
              }
              if (timeSlots.length > 0) {
                console.log(timeSlots, 'ejejeej')
                const earliestTime = new Date(0, 0, 0, ...timeSlots[0].split(':').map(Number));
                updateTabsBasedOnTime(earliestTime);
              }
            }
          });
        updateButtonState();
      }
    });

    elements.timeSwiperWrapper.addEventListener('click', (event) => {
      const timeElement = event.target.closest('.swiper-slide_time');
      if (timeElement) {
        document.querySelectorAll('.swiper-slide_time').forEach(el => el.classList.remove('active'));
        timeElement.classList.add('active');
        const selectedTime = timeElement.querySelector('.time').textContent;
        const endTime = addMinutesToTime(selectedTime, totalMinutes);
        selectedTime1 = selectedTime;
        fetch(`${config.url}/booking/choose_time`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({time: selectedTime, duration: totalMinutes, user_id: localStorage.getItem('user_id')})
        })
        updateButtonState();

        elements.employeeTimeElement.textContent = `${selectedTime} - ${endTime}`;
      }
    });

    elements.closeButton.addEventListener('click', (event) => {
      event.preventDefault();
      elements.modal.style.display = "flex";
    });
    elements.confirmExitBtn.addEventListener('click', () => {
      fetch(`${config.url}/exit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({user_id: localStorage.getItem('user_id')})
      })
      window.location.href = `/?uniq=${localStorage.getItem('uniq')}`;
    });
    elements.cancelExitBtn.addEventListener('click', () => {
      elements.modal.style.display = "none";
    });
    window.addEventListener('click', (event) => {
      if (event.target === elements.modal) {
        elements.modal.style.display = "none";
      }
    });

    const daySwiper = new Swiper('.day-swiper', {
      slidesPerView: 'auto',
      spaceBetween: 10,
      initialSlide: 0,
      on: {
        init: () => {
          updateHeaderTitle(config.days[0]);
          console.log('Day Swiper initialized');
        },
        slideChange: () => {
          const activeIndex = daySwiper.activeIndex;
          updateHeaderTitle(config.days[activeIndex]);
          scrollToTime(new Date())
        }
      }
    });

    const timeSwiper = new Swiper('.time-swiper', {
      slidesPerView: 4,
      spaceBetween: 10,
      initialSlide: config.times.findIndex(time => time.getHours() === today.getHours() && time.getMinutes() === today.getMinutes()),
      on: {
        init: () => console.log('Time Swiper initialized')
      }
    });

    function updateTabsBasedOnTime(time) {
      const hour = time.getHours();
      let activeTab = '';
      if (hour < 12) {
        activeTab = 'morning';
      } else if (hour >= 12 && hour < 16) {
        activeTab = 'day';
      } else {
        activeTab = 'evening';
      }

      elements.tabs.forEach(tab => {
        tab.classList.remove('active');
        if (tab.dataset.time === activeTab) {
          tab.classList.add('active');
        }
      });
    }

    function updateHeaderTitle(date) {
      const monthYear = formatMonthYear(date);
      const title = monthYear.charAt(0).toUpperCase() + monthYear.slice(1)
      elements.headerTitle.textContent = title.split('г')[0];
    }

    function scrollToTime(time) {
      const slideIndex = config.times.findIndex(t => t.getTime() === time.getTime());
      if (slideIndex !== -1) {
        timeSwiper.slideTo(slideIndex);
      }
    }
    function initActiveTabAndScroll() {
      const now = config.chosenTime ? new Date(0, 0, 0, ...config.chosenTime.split(':').map(Number)) : new Date();

      updateTabsBasedOnTime(now);
      scrollToTime(now);
    }
    initActiveTabAndScroll();
    timeSwiper.on('slideChange', () => {
      const activeIndex = timeSwiper.activeIndex;
      const activeTime = times[activeIndex];
      updateTabsBasedOnTime(activeTime);
    });

  });
</script>
</body>
</html>
